# Multi-stage optimized Dockerfile for LLM AI Bridge Server
# Ultra-lightweight production build with security hardening

# Build stage
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    sqlite-dev \
    && rm -rf /var/cache/apk/*

# Create app directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies with production optimizations
RUN npm ci --only=production --ignore-scripts --no-audit --no-fund \
    && npm cache clean --force

# Copy source code
COPY . .

# Build tools and compile TypeScript
RUN npm run build:tools \
    && npm run build \
    && npm prune --production

# Runtime stage
FROM node:20-alpine AS runtime

# Install runtime dependencies and security updates
RUN apk add --no-cache \
    sqlite \
    dumb-init \
    && apk upgrade \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001 -G nodejs

# Create app directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nextjs:nodejs /app/src ./src
COPY --from=builder --chown=nextjs:nodejs /app/server-optimized.js ./
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/cache /app/tmp \
    && chown -R nextjs:nodejs /app/logs /app/cache /app/tmp

# Switch to non-root user
USER nextjs

# Environment variables
ENV NODE_ENV=production
ENV PORT=8080
ENV MAX_WORKERS=4
ENV NODE_OPTIONS="--enable-source-maps --max-old-space-size=512"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:8080/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# Expose port
EXPOSE 8080

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the optimized server
CMD ["node", "server-optimized.js"]