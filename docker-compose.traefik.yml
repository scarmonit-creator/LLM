# Traefik Docker Compose Configuration
# Production-ready Traefik reverse proxy setup with SSL/TLS and monitoring

version: '3.8'

services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    
    # Command line configuration
    command:
      # API Configuration
      - --api.dashboard=true
      - --api.insecure=false
      
      # Entrypoints Configuration
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.traefik.address=:8080
      
      # HTTP to HTTPS Redirect
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      
      # Docker Provider
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=traefik
      
      # File Provider
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
      
      # Let's Encrypt ACME
      - --certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL:-admin@example.com}
      - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json
      - --certificatesresolvers.letsencrypt.acme.caserver=${TRAEFIK_ACME_CA_SERVER:-https://acme-v02.api.letsencrypt.org/directory}
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      
      # Logging
      - --log.level=${TRAEFIK_LOG_LEVEL:-INFO}
      - --accesslog=true
      - --accesslog.format=json
      - --accesslog.filepath=/var/log/traefik/access.log
      
      # Metrics
      - --metrics.prometheus=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addServicesLabels=true
    
    ports:
      - "${TRAEFIK_HTTP_PORT:-80}:80"          # HTTP
      - "${TRAEFIK_HTTPS_PORT:-443}:443"       # HTTPS
      - "${TRAEFIK_API_PORT:-8080}:8080"       # Dashboard
      - "${TRAEFIK_METRICS_PORT:-9090}:9090"   # Metrics
    
    volumes:
      # Docker socket for Docker provider
      - /var/run/docker.sock:/var/run/docker.sock:ro
      
      # ACME certificates storage
      - traefik-acme:/data
      
      # Dynamic configuration directory
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      
      # Logs directory
      - traefik-logs:/var/log/traefik
    
    networks:
      - traefik
    
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"
      
      # Dashboard configuration
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_API_DOMAIN:-traefik.localhost}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      
      # Dashboard authentication middleware
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_API_AUTH_USER:-admin}:${TRAEFIK_API_AUTH_PASSWORD:-$$2y$$10$$K2L4V8QsX9H6wGfE3pR5JuM7N9oP3qW4e5tY6u7I8oP9qW0eR1tY2u}"
      - "traefik.http.routers.traefik.middlewares=auth"
      
      # Security headers middleware
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.sslRedirect=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      
      # Rate limiting middleware
      - "traefik.http.middlewares.rate-limit.ratelimit.average=${TRAEFIK_RATE_LIMIT:-100}"
      - "traefik.http.middlewares.rate-limit.ratelimit.burst=50"
    
    environment:
      # Pass environment variables from .env.traefik
      - TRAEFIK_API_DASHBOARD
      - TRAEFIK_LOG_LEVEL
      - TRAEFIK_DOMAIN
      - TRAEFIK_API_DOMAIN
    
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Whoami service for testing
  whoami:
    image: traefik/whoami
    container_name: whoami
    restart: unless-stopped
    
    networks:
      - traefik
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.${TRAEFIK_DOMAIN:-localhost}`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls.certresolver=letsencrypt"
      - "traefik.http.routers.whoami.middlewares=security-headers,rate-limit"

volumes:
  traefik-acme:
    driver: local
  traefik-logs:
    driver: local

networks:
  traefik:
    external: true