name: Autonomous Chromium Repository Monitor

on:
  schedule:
    # Run every 15 minutes during active development hours (UTC)
    - cron: '*/15 6-18 * * 1-5'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force immediate monitoring run'
        required: false
        default: 'false'
        type: boolean
      alert_threshold:
        description: 'Custom alert threshold (commits/hour)'
        required: false
        default: '10'
        type: string

jobs:
  monitor-chromium:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests python-dateutil
        
    - name: Create necessary directories
      run: |
        mkdir -p reports alerts logs
        
    - name: Run Chromium monitor
      run: |
        python scripts/chromium_monitor.py
      env:
        PYTHONPATH: ${{ github.workspace }}
        
    - name: Check for alerts
      id: check_alerts
      run: |
        if [ -f "alerts/chromium_alerts.jsonl" ]; then
          ALERT_COUNT=$(wc -l < alerts/chromium_alerts.jsonl)
          echo "alert_count=$ALERT_COUNT" >> $GITHUB_OUTPUT
          echo "Found $ALERT_COUNT alerts"
        else
          echo "alert_count=0" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate monitoring report
      run: |
        echo "# Chromium Repository Monitoring Report" > monitoring_report.md
        echo "Generated: $(date -u)" >> monitoring_report.md
        echo "" >> monitoring_report.md
        
        if [ -f "reports/chromium_status.json" ]; then
          echo "## Status Summary" >> monitoring_report.md
          python -c "
        import json
        with open('reports/chromium_status.json') as f:
            data = json.load(f)
        print(f'- Repositories monitored: {data[\"repositories_monitored\"]}')
        print(f'- Monitoring timestamp: {data[\"timestamp\"]}')
        print('\n## Repository Status')
        for repo in data['repositories']:
            status_icon = 'ðŸ”´' if repo['status'] == 'elevated' else 'ðŸŸ¢'
            print(f'- {status_icon} **{repo[\"name\"]}** ({repo[\"priority\"]} priority)')
            print(f'  - Commits/hour: {repo[\"commit_frequency\"]}/{repo[\"alert_threshold\"]}')
            print(f'  - Status: {repo[\"status\"]}')
        " >> monitoring_report.md
        else
          echo "No status report generated" >> monitoring_report.md
        fi
        
        if [ -f "alerts/chromium_alerts.jsonl" ]; then
          echo "" >> monitoring_report.md
          echo "## Recent Alerts" >> monitoring_report.md
          tail -10 alerts/chromium_alerts.jsonl | while read line; do
            echo "- $(echo $line | python -c 'import sys, json; data=json.load(sys.stdin); print(f\"{data[\"timestamp\"]}: {data[\"repository\"]} - {data[\"alert_type\"]}\")')" >> monitoring_report.md
          done
        fi
        
    - name: Upload monitoring artifacts
      uses: actions/upload-artifact@v4
      with:
        name: chromium-monitoring-${{ github.run_number }}
        path: |
          reports/
          alerts/
          monitoring_report.md
          chromium_monitor.log
        retention-days: 30
        
    - name: Create issue for high alert count
      if: steps.check_alerts.outputs.alert_count > 5
      uses: actions/github-script@v7
      with:
        script: |
          const alertCount = '${{ steps.check_alerts.outputs.alert_count }}';
          
          const issueBody = `
          ## ðŸš¨ High Alert Volume Detected
          
          **Alert Count:** ${alertCount}
          **Monitoring Run:** ${{ github.run_number }}
          **Timestamp:** ${new Date().toISOString()}
          
          ### Recommended Actions:
          1. Review the monitoring report artifact
          2. Check chromium/src repository for unusual activity
          3. Verify build systems are functioning normally
          4. Consider adjusting alert thresholds if needed
          
          ### Artifacts:
          - [Monitoring Report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          This issue was automatically generated by the Chromium monitoring system.
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `ðŸš¨ Chromium Monitoring: ${alertCount} alerts detected`,
            body: issueBody,
            labels: ['monitoring', 'alert', 'chromium', 'automated']
          });
          
    - name: Post status to PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let reportContent = 'Monitoring report not available';
          
          try {
            reportContent = fs.readFileSync('monitoring_report.md', 'utf8');
          } catch (error) {
            console.log('Could not read monitoring report:', error.message);
          }
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Chromium Repository Monitoring\n\n${reportContent}`
          });

  test-monitor:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.force_run == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Test monitor functionality
      run: |
        python -c "
        import sys
        sys.path.append('scripts')
        from chromium_monitor import ChromiumMonitor
        
        monitor = ChromiumMonitor()
        summary = monitor.get_summary()
        print('Monitor test successful!')
        print(f'Loaded repositories: {summary[\"total_repositories\"]}')
        "
        
    - name: Validate analysis data
      run: |
        python -c "
        import json
        with open('analysis/chromium_repositories_analysis.json') as f:
            data = json.load(f)
        
        assert 'repositories' in data
        assert len(data['repositories']) > 0
        print('Analysis data validation passed!')
        "
