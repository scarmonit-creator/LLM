name: Optimization Systems CI/CD

on:
  push:
    branches:
      - main
      - optimization-improvements-2025
    paths:
      - 'src/optimization/**'
      - 'server-optimized.js'
      - 'scripts/test-optimization-systems.js'
      - 'package.json'
  pull_request:
    branches:
      - main
    paths:
      - 'src/optimization/**'
      - 'server-optimized.js'
      - 'scripts/test-optimization-systems.js'
      - 'package.json'
  schedule:
    # Run optimization tests daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      optimization_level:
        description: 'Optimization level to test'
        required: false
        default: 'ultra'
        type: choice
        options:
          - 'standard'
          - 'concurrent'
          - 'ultra'
          - 'breakthrough'
      run_stress_tests:
        description: 'Run stress tests'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  OPTIMIZATION_LEVEL: ultra
  ENABLE_AUTONOMOUS: true
  ENABLE_PREDICTIVE: true
  ENABLE_ML_OPTIMIZATION: true
  MEMORY_THRESHOLD: 0.85
  CPU_THRESHOLD: 0.80

jobs:
  optimization-validation:
    name: Validate Optimization Systems
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        optimization-level: [standard, concurrent, ultra]
        node-version: ['18', '20']
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        npm ci
        pip install -r requirements.txt
    
    - name: Build optimization systems
      run: |
        npm run build:tools
        npm run build:optimized
    
    - name: Run optimization system tests
      env:
        OPTIMIZATION_LEVEL: ${{ matrix.optimization-level }}
        NODE_OPTIONS: '--expose-gc --max-old-space-size=4096'
      run: |
        echo "Testing optimization level: ${{ matrix.optimization-level }}"
        node scripts/test-optimization-systems.js
    
    - name: Run concurrent optimization tests
      if: matrix.optimization-level != 'standard'
      run: |
        npm run concurrent:optimize
        npm run test:concurrent
    
    - name: Run performance benchmarks
      env:
        NODE_OPTIONS: '--expose-gc'
      run: |
        npm run performance:analyze
        npm run performance:report
    
    - name: Test server startup with optimization
      timeout-minutes: 2
      run: |
        # Start optimized server in background
        npm run start:optimized &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test endpoints
        curl -f http://localhost:8080/health
        curl -f http://localhost:8080/optimization
        curl -f http://localhost:8080/performance
        
        # Stop server
        kill $SERVER_PID || true
        wait $SERVER_PID 2>/dev/null || true
    
    - name: Upload optimization test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: optimization-test-results-${{ matrix.optimization-level }}-node${{ matrix.node-version }}
        path: |
          optimization_test_results_*.json
          concurrent_*_report.json
          performance_*.json
        retention-days: 30

  stress-testing:
    name: Stress Test Optimization Systems
    runs-on: ubuntu-latest
    needs: optimization-validation
    timeout-minutes: 45
    if: ${{ github.event.inputs.run_stress_tests == 'true' || github.event_name != 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run breakthrough optimization stress test
      env:
        NODE_OPTIONS: '--expose-gc --max-old-space-size=8192'
      run: |
        echo "Running breakthrough optimization stress test"
        npm run breakthrough:optimize
        npm run breakthrough:full
    
    - name: Run concurrent stress test
      run: |
        npm run concurrent:breakthrough
        node -e "
          console.log('Starting stress test...');
          const iterations = 1000;
          const concurrency = 10;
          
          const workers = Array.from({length: concurrency}, async (_, i) => {
            for (let j = 0; j < iterations; j++) {
              JSON.stringify({worker: i, iteration: j, data: new Array(1000).fill(Math.random())});
              if (j % 100 === 0) await new Promise(r => setImmediate(r));
            }
          });
          
          Promise.all(workers).then(() => console.log('Stress test completed successfully'));
        "
    
    - name: Memory leak detection test
      env:
        NODE_OPTIONS: '--expose-gc'
      run: |
        node -e "
          let objects = [];
          const startMemory = process.memoryUsage().heapUsed;
          
          // Create potential memory leak
          for (let i = 0; i < 10000; i++) {
            objects.push({id: i, data: Buffer.alloc(1024, 'test')});
          }
          
          const peakMemory = process.memoryUsage().heapUsed;
          console.log('Peak memory:', Math.round(peakMemory / 1024 / 1024), 'MB');
          
          // Clear and test GC
          objects = [];
          if (global.gc) global.gc();
          
          setTimeout(() => {
            const finalMemory = process.memoryUsage().heapUsed;
            const recovered = (peakMemory - finalMemory) / 1024 / 1024;
            console.log('Memory recovered:', Math.round(recovered), 'MB');
            
            if (recovered < 8) {
              console.error('Potential memory leak detected!');
              process.exit(1);
            } else {
              console.log('Memory leak test passed');
              process.exit(0);
            }
          }, 1000);
        "

  performance-benchmarking:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    needs: optimization-validation
    timeout-minutes: 20
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run baseline performance test
      run: |
        echo "Running baseline performance test"
        npm run start &
        SERVER_PID=$!
        sleep 5
        
        # Benchmark baseline
        BASELINE_RESPONSE=$(curl -w "%{time_total}" -s -o /dev/null http://localhost:8080/health)
        echo "Baseline response time: ${BASELINE_RESPONSE}s"
        
        kill $SERVER_PID
        wait $SERVER_PID 2>/dev/null || true
        sleep 2
    
    - name: Run optimized performance test
      env:
        NODE_OPTIONS: '--expose-gc'
      run: |
        echo "Running optimized performance test"
        npm run start:optimized &
        SERVER_PID=$!
        sleep 10
        
        # Benchmark optimized
        OPTIMIZED_RESPONSE=$(curl -w "%{time_total}" -s -o /dev/null http://localhost:8080/health)
        echo "Optimized response time: ${OPTIMIZED_RESPONSE}s"
        
        # Test optimization endpoints
        curl -f http://localhost:8080/optimization
        curl -f http://localhost:8080/performance
        
        # Get comprehensive metrics
        curl -s http://localhost:8080/optimization/report > optimization_benchmark_report.json
        
        kill $SERVER_PID
        wait $SERVER_PID 2>/dev/null || true
    
    - name: Compare performance results
      run: |
        node -e "
          const fs = require('fs');
          const baseline = parseFloat(process.env.BASELINE_RESPONSE || '1.0');
          const optimized = parseFloat(process.env.OPTIMIZED_RESPONSE || '1.0');
          
          const improvement = ((baseline - optimized) / baseline) * 100;
          console.log('Performance improvement:', improvement.toFixed(1), '%');
          
          if (improvement < 20) {
            console.error('Performance improvement below target (20%)');
            process.exit(1);
          } else {
            console.log('Performance benchmark passed!');
            
            // Save benchmark results
            const results = {
              baseline: baseline,
              optimized: optimized,
              improvement: improvement,
              timestamp: new Date().toISOString()
            };
            
            fs.writeFileSync('benchmark_results.json', JSON.stringify(results, null, 2));
          }
        "
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: performance-benchmarks
        path: |
          optimization_benchmark_report.json
          benchmark_results.json
        retention-days: 30

  deployment-validation:
    name: Validate Deployment Readiness
    runs-on: ubuntu-latest
    needs: [optimization-validation, performance-benchmarking]
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/optimization-improvements-2025'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: |
        npm run build:ultra
        npm run build:website
    
    - name: Validate production readiness
      env:
        NODE_ENV: production
        NODE_OPTIONS: '--expose-gc'
      run: |
        echo "Validating production deployment"
        
        # Start optimized server in production mode
        npm run start:production &
        SERVER_PID=$!
        
        # Wait for startup
        sleep 15
        
        # Health check
        HEALTH_STATUS=$(curl -s http://localhost:8080/health | jq -r '.status')
        if [ "$HEALTH_STATUS" != "ok" ]; then
          echo "Health check failed: $HEALTH_STATUS"
          kill $SERVER_PID
          exit 1
        fi
        
        # Optimization system check
        OPTIMIZATION_STATUS=$(curl -s http://localhost:8080/optimization | jq -r '.data.status.isRunning')
        if [ "$OPTIMIZATION_STATUS" != "true" ]; then
          echo "Optimization systems not running"
          kill $SERVER_PID
          exit 1
        fi
        
        # Performance check
        PERFORMANCE_SCORE=$(curl -s http://localhost:8080/optimization | jq -r '.data.health.overall // 0')
        if (( $(echo "$PERFORMANCE_SCORE < 70" | bc -l) )); then
          echo "Performance score too low: $PERFORMANCE_SCORE"
          kill $SERVER_PID
          exit 1
        fi
        
        echo "All validation checks passed!"
        echo "Health Status: $HEALTH_STATUS"
        echo "Optimization Status: $OPTIMIZATION_STATUS"
        echo "Performance Score: $PERFORMANCE_SCORE%"
        
        kill $SERVER_PID
        wait $SERVER_PID 2>/dev/null || true
    
    - name: Generate deployment summary
      run: |
        cat > deployment_summary.md << 'EOF'
        # Optimization Systems Deployment Summary
        
        ## Validation Results
        - **Health Check**: ✅ Passed
        - **Optimization Systems**: ✅ Active
        - **Performance Score**: ✅ Above threshold
        - **Production Build**: ✅ Successful
        
        ## Optimization Features Deployed
        - 🚀 Real-time Optimization Engine
        - 🧠 Intelligent Memory Manager
        - ⚡ Enhanced Performance Optimizer
        - 🎯 Optimization Orchestrator
        
        ## Performance Improvements
        - Memory optimization: Active
        - CPU efficiency: Enhanced
        - Response time: Optimized
        - System coordination: Enabled
        
        ## Deployment Timestamp
        $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        EOF
        
        cat deployment_summary.md
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-validation
        path: |
          deployment_summary.md
          dist/
        retention-days: 90

  auto-deployment:
    name: Auto-Deploy Optimized System
    runs-on: ubuntu-latest
    needs: [optimization-validation, stress-testing, performance-benchmarking, deployment-validation]
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production deployment
      run: |
        npm run build:autonomous
        npm run optimize:ultra
    
    - name: Deploy to Fly.io (if configured)
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      run: |
        if [ -n "$FLY_API_TOKEN" ] && [ -f "fly.toml" ]; then
          echo "Deploying optimized system to Fly.io"
          
          # Install flyctl
          curl -L https://fly.io/install.sh | sh
          export PATH="$HOME/.fly/bin:$PATH"
          
          # Deploy with optimization
          flyctl deploy --config fly.toml --strategy immediate
          
          # Verify deployment
          sleep 30
          flyctl status
          
          echo "Deployment completed successfully"
        else
          echo "Fly.io deployment skipped (no token or config)"
        fi
    
    - name: Notify deployment success
      run: |
        echo "🚀 OPTIMIZATION SYSTEMS DEPLOYED SUCCESSFULLY!"
        echo "✅ All validation tests passed"
        echo "⚡ Advanced optimization systems active"
        echo "📊 Performance monitoring enabled"
        echo "🤖 Autonomous optimization operational"

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [optimization-validation, stress-testing, performance-benchmarking]
    if: always()
    
    steps:
    - name: Determine notification status
      id: status
      run: |
        if [ "${{ needs.optimization-validation.result }}" == "success" ] && \
           [ "${{ needs.stress-testing.result }}" == "success" ] && \
           [ "${{ needs.performance-benchmarking.result }}" == "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=All optimization systems validated successfully" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=Optimization system validation failed" >> $GITHUB_OUTPUT
        fi
    
    - name: Create summary comment (PR only)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ steps.status.outputs.status }}';
          const message = '${{ steps.status.outputs.message }}';
          
          const emoji = status === 'success' ? '✅' : '❌';
          const title = status === 'success' ? 'Optimization Systems Validated' : 'Optimization Validation Failed';
          
          const body = `## ${emoji} ${title}
          
          ${message}
          
          ### Test Results
          - **Optimization Validation**: ${{ needs.optimization-validation.result }}
          - **Stress Testing**: ${{ needs.stress-testing.result }}
          - **Performance Benchmarking**: ${{ needs.performance-benchmarking.result }}
          
          ### Optimization Systems Status
          - 🚀 Real-time Optimization Engine: ${status === 'success' ? 'Validated' : 'Check Required'}
          - 🧠 Intelligent Memory Manager: ${status === 'success' ? 'Validated' : 'Check Required'}
          - ⚡ Enhanced Performance Optimizer: ${status === 'success' ? 'Validated' : 'Check Required'}
          - 🎯 Optimization Orchestrator: ${status === 'success' ? 'Validated' : 'Check Required'}
          
          ### Next Steps
          ${status === 'success' ? 
            '- Ready for deployment with optimization systems\n- All performance targets met\n- Systems validated and operational' : 
            '- Review failed test logs\n- Fix optimization system issues\n- Re-run validation tests'
          }
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
