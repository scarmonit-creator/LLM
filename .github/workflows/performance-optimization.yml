name: 🚀 Autonomous Performance Optimization

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      optimization_level:
        description: 'Optimization Level'
        required: false
        default: 'full'
        type: choice
        options:
        - basic
        - full
        - aggressive

jobs:
  performance-optimization:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📋 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: |
        npm ci
        npm run build:tools
        
    - name: 🧪 Pre-optimization Health Check
      run: |
        echo "=== Pre-optimization System State ==="
        node -e "console.log('Node.js:', process.version); console.log('Memory:', Math.round(process.memoryUsage().heapUsed/1024/1024) + 'MB');"
        
    - name: ⚡ Run Autonomous Performance Optimization
      run: |
        echo "=== Running Autonomous Optimization ==="
        npm run optimize:autonomous
        
    - name: 🔧 Build with Optimization
      run: |
        echo "=== Building with Optimizations ==="
        npm run build:production
        
    - name: 🏥 Health Check Validation
      run: |
        echo "=== Starting Server for Health Check ==="
        timeout 30s npm run start:production &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test health endpoints
        echo "Testing health endpoints..."
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/api/status || exit 1
        curl -f http://localhost:8080/metrics || exit 1
        
        # Stop server
        kill $SERVER_PID 2>/dev/null || true
        
    - name: 📊 Performance Report Generation
      run: |
        echo "=== Generating Performance Report ==="
        npm run performance:report
        
    - name: 📈 Analyze Performance Metrics
      run: |
        echo "=== Performance Analysis ==="
        if [ -f optimization-report.json ]; then
          echo "Optimization report generated successfully"
          node -e "const report = require('./optimization-report.json'); console.log('Performance Gain:', report.optimization_results.performance_gain_percent + '%'); console.log('Memory Saved:', report.optimization_results.memory_saved_mb + 'MB'); console.log('Optimizations Applied:', report.optimization_results.successful);"
        else
          echo "❌ Optimization report not found"
          exit 1
        fi
        
    - name: 📋 Upload Performance Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports-node-${{ matrix.node-version }}
        path: |
          optimization-report.json
          build-report.json
        retention-days: 30
        
    - name: 💌 Performance Summary Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('optimization-report.json')) {
            const report = JSON.parse(fs.readFileSync('optimization-report.json', 'utf8'));
            const comment = `## 🚀 Performance Optimization Results\n\n` +
              `**Node.js Version:** ${{ matrix.node-version }}\n` +
              `**Performance Gain:** ${report.optimization_results.performance_gain_percent}%\n` +
              `**Memory Saved:** ${report.optimization_results.memory_saved_mb}MB\n` +
              `**Optimizations Applied:** ${report.optimization_results.successful}\n` +
              `**Execution Time:** ${report.execution_time_ms}ms\n\n` +
              `### ✅ Health Checks\n` +
              `- Health endpoint: ✅\n` +
              `- Status API: ✅\n` +
              `- Metrics endpoint: ✅\n\n` +
              `**Status:** 🟢 All optimizations applied successfully`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  security-scan:
    runs-on: ubuntu-latest
    needs: performance-optimization
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📋 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔒 Security Audit
      run: |
        echo "=== Running Security Audit ==="
        npm audit --audit-level=moderate
        
    - name: 🛡️ Dependency Check
      run: |
        echo "=== Checking Dependencies ==="
        npx depcheck
        
  deployment-readiness:
    runs-on: ubuntu-latest
    needs: [performance-optimization, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📋 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🚀 Deployment Preparation
      run: |
        echo "=== Preparing for Deployment ==="
        npm run deploy:prepare
        
    - name: ✅ Final Validation
      run: |
        echo "=== Final Deployment Validation ==="
        # Verify all required files exist
        test -f dist/tools/browser-history.js || (echo "❌ Missing browser-history.js" && exit 1)
        test -f optimization-report.json || (echo "❌ Missing optimization report" && exit 1)
        test -f OPTIMIZATION.md || (echo "❌ Missing optimization documentation" && exit 1)
        
        echo "✅ Deployment validation passed"
        
    - name: 📊 Deployment Summary
      run: |
        echo "=== Deployment Summary ==="
        echo "📦 Repository: ${{ github.repository }}"
        echo "🔀 Branch: ${{ github.ref_name }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "🚀 Status: Ready for deployment"
        echo "⚡ Optimizations: Active"
        echo "🏥 Health Checks: Configured"
        echo "📈 Monitoring: Enabled"