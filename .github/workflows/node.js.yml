# Optimized Node.js CI/CD Pipeline with Performance Enhancements
# This workflow implements intelligent caching, parallel execution, and optimized build strategies
name: Node.js CI

permissions:
  contents: write
  id-token: write
  attestations: write
  actions: read
  checks: write

on:
  push:
    branches: [ "main" ]
    paths:
      - '**.js'
      - '**.ts'
      - '**.jsx'
      - '**.tsx'
      - '**.json'
      - 'package*.json'
      - 'yarn.lock'
      - 'pnpm-lock.yaml'
      - '.github/workflows/node.js.yml'
      - 'src/**'
      - 'test/**'
      - 'tests/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**.js'
      - '**.ts'
      - '**.jsx'
      - '**.tsx'
      - '**.json'
      - 'package*.json'
      - 'yarn.lock'
      - 'pnpm-lock.yaml'
      - '.github/workflows/node.js.yml'
      - 'src/**'
      - 'test/**'
      - 'tests/**'
  workflow_dispatch:

# Optimize concurrency - cancel stale runs per branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Pre-flight check to determine if we should run full suite
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      node_versions: ${{ steps.check.outputs.node_versions }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if should run full suite
        id: check
        run: |
          # For PRs, only run on Node 20.x for speed
          # For main branch, run on both 18.x and 20.x
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "node_versions=[\"20.x\"]" >> $GITHUB_OUTPUT
          else
            echo "node_versions=[\"18.x\", \"20.x\"]" >> $GITHUB_OUTPUT
          fi
          echo "should_run=true" >> $GITHUB_OUTPUT

  # Combined lint and style check
  lint:
    name: Lint & Style Check
    needs: preflight
    if: needs.preflight.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies (production only for lint)
        run: npm ci --prefer-offline --no-audit
        
      - name: Run ESLint
        run: npm run lint --if-present
        continue-on-error: false

  # Security scanning
  security:
    name: Security Scan
    needs: preflight
    if: needs.preflight.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Check for known vulnerabilities
        run: |
          if [ -f package-lock.json ]; then
            npm audit --json > audit-results.json || true
            echo "Audit complete"
          fi

  # Main build and test matrix
  build:
    name: Build & Test (Node ${{ matrix.node-version }})
    needs: [preflight, lint]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        node-version: ${{ fromJson(needs.preflight.outputs.node_versions) }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Build
        run: npm run build --if-present
      
      - name: Run tests
        run: npm test --if-present
        env:
          CI: true
      
      - name: Upload coverage
        if: matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.node-version }}
          path: coverage/
          retention-days: 7
        continue-on-error: true

  # Build attestation (only on main branch)
  attest:
    name: Build Attestation
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Build for attestation
        run: npm run build --if-present
      
      - name: Generate attestation
        uses: actions/attest-build-provenance@v1
        if: always()
        continue-on-error: true
        with:
          subject-path: |
            dist/**
            build/**

  # Workflow status summary
  status:
    name: Workflow Status
    needs: [preflight, lint, security, build]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Check workflow status
        run: |
          echo "Preflight: ${{ needs.preflight.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Build: ${{ needs.build.result }}"
          
          if [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Build failed"
            exit 1
          elif [[ "${{ needs.lint.result }}" == "failure" ]]; then
            echo "❌ Lint failed"
            exit 1
          else
            echo "✅ Workflow completed successfully"
          fi
